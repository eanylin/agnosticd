---
- name: deploy argocd operator
  k8s:
    state: present
    definition: "{{ lookup('file', item ) | from_yaml }}"
  loop:
  - ./files/argocd_operatorgroup.yaml
  - ./files/argocd_subscription.yaml

# On OCP 4.4.11, role binding for argocd-redis-ha
# doesn't get created for argocd operator v0.0.11.
- name: Wait until all 6 argocd role bindings appear
  k8s_facts:
    kind: RoleBinding
    api_version: rbac.authorization.k8s.io/v1
    namespace: labs-argocd
    label_selectors:
      olm.owner = argocd-operator.v0.0.11
  register: argocd_rolebinding
  retries: 5
  delay: 10
  until: argocd_rolebinding.resources | list | length == 6
  ignore_errors: yes

- name: Get role binding for argocd-redis-ha
  k8s_facts:
    api_version: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    namespace: labs-argocd
  register: results

- name: set argocd-redis-ha fact
  set_fact:
    role_binding_argocd_redis_ha_exists: "{{results | json_query(query) | length | bool}}"
  vars:
    query: "resources[*].subjects[?name == 'argocd-redis-ha'][]"

- name: Create role for argocd-redis-ha
  k8s:
    definition:
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: argocd-operator.v0.0.11-argocd-redis-ha
        namespace: labs-argocd
        labels:
          olm.owner: argocd-operator.v0.0.11
          olm.owner.kind: ClusterServiceVersion
          olm.owner.namespace: labs-argocd
      rules:
        - verbs:
            - get
          apiGroups:
            - ''
          resources:
            - endpoints
  when: not role_binding_argocd_redis_ha_exists

- name: Create role binding for argocd-redis-ha
  k8s:
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: argocd-operator.v0.0.11-argocd-redis-ha
        namespace: labs-argocd
        labels:
          olm.owner: argocd-operator.v0.0.11
          olm.owner.kind: ClusterServiceVersion
          olm.owner.namespace: labs-argocd
      subjects:
        - kind: ServiceAccount
          name: argocd-redis-ha
          namespace: labs-argocd
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: argocd-operator.v0.0.11-argocd-redis-ha
  when: not role_binding_argocd_redis_ha_exists
  
- name: Wait for ArgoCD CRD to be ready
  k8s_facts:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: argocds.argoproj.io
  register: argocd_cr
  retries: 200
  delay: 10
  until: argocd_cr.resources | list | length == 1

- name: Create argocd repo passwords
  k8s:
    state: present
    definition:    
      kind: Secret
      apiVersion: v1
      metadata:
        name: repo-{{user}}-deploy
        namespace: labs-argocd
      data:
        password: "{{ gogs_pwd | b64encode }}"
        username: "{{ user | b64encode }}"
      type: Opaque
  loop: "{{users}}"
  loop_control:
    loop_var: user
    
- name: Create argocd 
  k8s:
    state: present
    definition: "{{ lookup('template', './templates/argocd_cr.yaml.j2' ) | from_yaml }}"

- name: Wait for argocd to be available
  k8s_facts:
    api_version: argoproj.io/v1alpha1
    kind: ArgoCD
    name: argocd
    namespace: labs-argocd
  register: result
  until: result | json_query("resources[0].status.phase=='Available'")
  retries: 40
  delay: 10

- name: Create argocd application
  include_tasks: add-argocd-app.yaml
  vars:
    user: "{{ item[0] }}"
    ns: "{{ item[0] }}-{{ item[1] }}"    
    env: "{{item[1]}}"    
  loop: "{{ users|product(['stage', 'prod'])|list }}"

- name: Get existing groups
  shell: |
    oc get groups -o name
  register: results

- name: Create argocd groups
  shell: |
    oc adm groups new {{item}}
  when: item not in results.stdout
  loop:
    - argocdadmins
    - argocdusers
  
- name: Add {{ocp_username}} to argocdadmins
  shell: |
    oc adm groups add-users argocdadmins {{ocp_username}}

- name: Add user to argocdusers
  shell: |
      oc adm groups add-users argocdusers {{user}}
  loop: "{{users}}"
  loop_control:
    loop_var: user